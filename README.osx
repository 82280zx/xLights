xLights OS/X build instructions
------------------------------------------------------------------------------
NOTE: These docs need updating for build instructions for xLights
      These are the original Mac OS/X notes from ToolConfig.txt created by
      Matt Brown for xLights.
------------------------------------------------------------------------------

xLights can be built and run on Linux, Mac OS/X, or Windows. This
document describes how **developers** should set up their tool chain to build
xLights on Mac OS/X.

xLights is written in C++ and uses the wxWidgets library as a
compatibility layer across operating systems.  The minimum required version
of wxWidgets for xLights on OS X is 3.1.3.

Unfortunately, xLights cannot be compiled wxWidgets3 that is part 
of MacPorts due to that build not including the wxMediaControl widgets that 
is required for xLights.  You must build wxWidgets from source.


On OS/X, compilation is done using Xcode. Code::Blocks is not used.
Xcode can be downloaded from the Apple developer web site or the App Store. Make
sure you install the version of Xcode that matches your version of
OS/X. For example, I use OS/X 10.15, so I installed Xcode 11.5.


The latest wxWidgets release (3.1.3) will not work anymore as we need some API's that have
been added since then.  We also have several other fixes in place for background rendering, etc...

To get the latest code that we've tested, do:

git clone  --recurse-submodules -b xlights_2020.31 https://github.com/dkulp/wxWidgets

Then, from inside a Terminal window:

  cd <wxMac base dir>
  cd build
  export BINARY_PLATFORMS=x86_64
  # export BINARY_PLATFORMS="x86_64,arm64"
  export CXXFLAGS="-g"
  export OBJCXXFLAGS=""
  export CPPFLAGS="-g"
  export LDFLAGS=""
  export CXX=clang++ 
  export CXXCPP="clang++ -E" 
  export CC=clang 
  export CPP="clang -E" 
  export CFLAGS="-g"
  ../configure  --prefix=/opt/local --libdir=/opt/local/libdbg \
                --enable-debug --disable-compat30 --enable-debug_info --disable-optimise --enable-universal_binary=${BINARY_PLATFORMS} \
                --enable-mediactrl --with-osx_cocoa  --with-opengl --disable-dependency-tracking \
                --with-macosx-version-min=10.10 --with-libjpeg=builtin  --without-libtiff --enable-mimetype \
                --with-cxx=17 --enable-cxx11 --enable-std_containers --enable-std_string --enable-std_string_conv_in_wxstring \
                --enable-backtrace --enable-exceptions --enable-aui --without-liblzma  --with-expat=builtin --with-zlib=builtin
  make -j 8
  make install


If you are planning on being able to build Release builds, you will ALSO need to do:

  export BINARY_PLATFORMS="x86_64"
  # export BINARY_PLATFORMS="x86_64,arm64"
  export CXXFLAGS="-flto=thin"
  export OBJCXXFLAGS="-flto=thin"
  export CPPFLAGS="-flto=thin"
  export LDFLAGS="-flto=thin"
  export CXX=clang++ 
  export CXXCPP="clang++ -E" 
  export CC=clang 
  export CPP="clang -E" 
  export CFLAGS=""
  ../configure  --disable-debug --enable-optimise --prefix=/opt/local --enable-universal_binary=${BINARY_PLATFORMS} \
                --enable-mediactrl --with-osx_cocoa --with-opengl --disable-dependency-tracking \
                --disable-compat30 --with-libjpeg=builtin  --without-libtiff --enable-mimetype \
                --with-cxx=17 --enable-cxx11 --enable-std_containers --enable-std_string --enable-std_string_conv_in_wxstring \
                --enable-backtrace --enable-exceptions --enable-aui --without-liblzma  --with-expat=builtin --with-zlib=builtin --disable-shared
  make -j 8
  make install



Next, you will use Xcode to compile xLights. Most of the steps are listed here:

  http://wiki.wxwidgets.org/Creating_Xcode_projects_for_wxWidgets_applications

However, if you have the XCode command line tools installed, you should just be able to run "xcodebuild" and it should build and compile xLights automatically.



Other library notes:
Note:  These instructions now assume Xcode 12 with support for Arm64.

x264 - needed for ffmpeg
grab latest from:
https://www.videolan.org/developers/x264.html
git clone https://code.videolan.org/videolan/x264.git
./configure --disable-asm --enable-static --bit-depth=8 --disable-cli --enable-lto  --enable-strip --extra-cflags="-target x86_64-apple-macos10.10 -target arm64-apple-macos10.10 -arch arm64 -arch x86_64"
make
# that make will fail as make deps will not work with multiple arch flags
make
make install

ffmpeg:   currently using 4.3.1 - needs x264 installed as above
brew install yasm

export MACOSX_DEPLOYMENT_TARGET=10.10
export CXXFLAGS="-stdlib=libc++ -std=c++1z"
export OBJCXXFLAGS="-stdlib=libc++ -std=c++1z"
export CPPFLAGS="-stdlib=libc++"
export LDFLAGS="-stdlib=libc++"
export CXX=clang++
export CXXCPP="clang++ -E"
export CC=clang
export CPP="clang -E"
export CFLAGS=""
./configure  --disable-x86asm --disable-securetransport --enable-shared --extra-cflags="-mmacosx-version-min=10.10 -Dx264_bit_depth=8" --disable-indev=lavfi --enable-libx264 --enable-gpl --enable-opengl
make
mkdir -p /tmp/ffmpeglibs_x86_64
cp ./libavcodec/libavcodec.58.dylib ./libswresample/libswresample.3.dylib ./libswscale/libswscale.5.dylib ./libavformat/libavformat.58.dylib ./libavutil/libavutil.56.dylib /tmp/ffmpeglibs_x86_64
./configure  --disable-asm --disable-securetransport --enable-shared --extra-cflags="-mmacosx-version-min=10.10 -target arm64-apple-macos10.10 -arch arm64 -Dx264_bit_depth=8" --disable-indev=lavfi --enable-libx264 --enable-gpl --enable-opengl --arch=arm64
mkdir -p /tmp/ffmpeglibs
lipo -create -output /tmp/ffmpeglibs/libavcodec.58.dylib  /tmp/ffmpeglibs_x86_64/libavcodec.58.dylib  ./libavcodec/libavcodec.58.dylib
lipo -create -output /tmp/ffmpeglibs/libswresample.3.dylib /tmp/ffmpeglibs_x86_64/libswresample.3.dylib  ./libswresample/libswresample.3.dylib
lipo -create -output /tmp/ffmpeglibs/libswscale.5.dylib  /tmp/ffmpeglibs_x86_64/libswscale.5.dylib  ./libswscale/libswscale.5.dylib
lipo -create -output /tmp/ffmpeglibs/libavformat.58.dylib  /tmp/ffmpeglibs_x86_64/libavformat.58.dylib  ./libavformat/libavformat.58.dylib
lipo -create -output /tmp/ffmpeglibs/libavutil.56.dylib /tmp/ffmpeglibs_x86_64/libavutil.56.dylib  ./libavutil/libavutil.56.dylib


libzstd:
git clone https://github.com/facebook/zstd
cd zstd
# need to move any local libraries from homebrew out of the way
sudo mv /usr/local/lib /usr/local/l2
export MACOSX_DEPLOYMENT_TARGET=11
export CFLAGS="-target arm64-apple-macos11"
make
mv lib/libzstd.a lib/libzstd.a.arm
make clean
export MACOSX_DEPLOYMENT_TARGET=10.10
export CFLAGS="-target x86_64-apple-macos10.10"
make
mv lib/libzstd.a lib/libzstd.a.x86_64
lipo -create -output lib/libzstd.a  lib/libzstd.a.x86_64 lib/libzstd.a.arm
# restore any local libraries from homebrew
sudo mv /usr/local/l2 /usr/local/lib


log4cpp:
Download latest src release (current 1.1.3)
export MACOSX_DEPLOYMENT_TARGET=10.10
export CXXFLAGS="-target x86_64-apple-macos10.10 -std=gnu++11 -stdlib=libc++ -fvisibility-inlines-hidden"
export LDFLAGS="-target x86_64-apple-macos10.10"
export OBJCXXFLAGS=""
export CPPFLAGS=""
export CXX=clang++
export CXXCPP="clang++ -E"
export CC=clang
export CPP="clang++ -E"
export CFLAGS=""
./configure --prefix=/opt/local
make
cp ./src/.libs/liblog4cpp.a ./liblog4cpp.a.x86_64
make clean
export CXXFLAGS="-target arm64-apple-macos10.10 -std=gnu++11 -stdlib=libc++ -fvisibility-inlines-hidden"
export LDFLAGS="-target arm64-apple-macos10.10"
./configure --prefix=/opt/local --host x86_64
make
lipo -create -output ./liblog4cpp.a  ./liblog4cpp.a.x86_64 ./src/.libs/liblog4cpp.a


liquidfun:
# requires cmake to be installed, most likely need to have
# homebrew isntalled and then "brew install cmake"
git clone https://github.com/google/liquidfun
cd liquidfun/Box2D
export CXX=clang++
export MACOSX_DEPLOYMENT_TARGET=10.10
export CXXFLAGS="-target x86_64-apple-macos10.10"
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DBOX2D_BUILD_EXAMPLES=OFF
make
mv ./Box2D/Release/libliquidfun.a ./Box2D/Release/libliquidfun.a.x86_64
rm -rf CMakeFiles CMakeCache.txt Box2D/CMakeFiles
export CXXFLAGS="-target arm64-apple-macos11"
unset MACOSX_DEPLOYMENT_TARGET
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DBOX2D_BUILD_EXAMPLES=OFF
make
mv ./Box2D/Release/libliquidfun.a ./Box2D/Release/libliquidfun.a.arm
lipo -create -output ./Box2D/Release/libliquidfun.a   ./Box2D/Release/libliquidfun.a.x86_64 ./Box2D/Release/libliquidfun.a.arm


SDL2:  currently using 2.0.12
export MACOSX_DEPLOYMENT_TARGET=10.10
export CXXFLAGS="-target x86_64-apple-macos10.10"
./configure
make
cp build/.libs/libSDL2-2.0.0.dylib /tmp
export CXXFLAGS="-target arm64-apple-macos11 -arch arm64"
export CFLAGS="-target arm64-apple-macos11 -arch arm64"
export LDFLAGS="-target arm64-apple-macos11 -arch arm64"
// host of x86-apple-darwin is bogus, but any 'arm-apple-darwin' is detected as iOS which is wrong
./configure --host=x86-apple-darwin  --disable-render-metal --disable-video-opengl --disable-video-opengles --disable-video-opengles2 --disable-video-vulkan
 lipo -create -output libSDL2-2.0.0.dylib /tmp/libSDL2-2.0.0.dylib build/.libs/libSDL2-2.0.0.dylib


portmidi:
git clone https://github.com/AndrewBelt/portmidi
Remove i386 from CMakeLists.txt


Codeblocks:
Codeblocks needs to have wxWidgets compiled differently, specifically c++14, no lto-thin, and without the containers, shared libs

Set install dir:  needs to be separate from wxWidgets used for xLights:
export CB_INSTALL=${CB_INSTALL:=~/working/codeblocks/install_dir}

export CXXFLAGS="-stdlib=libc++ -std=c++14"
export OBJCXXFLAGS="-stdlib=libc++ -std=c++14"
export CPPFLAGS="-stdlib=libc++"
export LDFLAGS="-stdlib=libc++"
export CXX=clang++
export CXXCPP="clang++ -E"
export CC=clang
export CPP="clang -E"
export CFLAGS=""
mkdir -p $CB_INSTALL
../configure  --disable-debug --enable-optimise --prefix=$CB_INSTALL --enable-macosx_arch=x86_64 \
             --enable-mediactrl --with-osx_cocoa --with-opengl --disable-dependency-tracking \
             --disable-compat30 --with-macosx-version-min=10.10 --with-libjpeg=builtin  --without-libtiff --enable-mimetype \
             --with-cxx=14 --enable-cxx11  \
             --enable-backtrace --enable-exceptions --enable-aui --without-liblzma  --with-expat=builtin
make -j 8
make install

Then in codeblocks, after bootstrap:
PATH=$CB_INSTALL/bin:$PATH
./configure --with-contrib-plugins=all,-spellchecker,-FileManager,-NassiShneiderman,-profiler --prefix=$CB_INSTALL
make -j 8
make install
./bundle.sh



wxWidgets git hash history:
Feb 28, 2016 - cbb799b1ae3f309c99beb0d287e9bb3b62ea405c Update to 3.1.0 release from 3.0.x
Nov 23, 2016 - b28dd88994ec144c2235721ef8e1133b3651e790 Newer version fixing various bugs, also for 10.12 sdk support
Jun  1, 2017 - ff447038714f853a0bae1720e3e8d6f8da279c51 to be able to compile with 10.13 sdk
Aug 30, 2017 - 4a71ba820f085a3d5a7233e9fd0e23ae4e45af58 attempt to see if fixes #884
Sept 17, 2017 - a8b33bf08ed582a241071ff7fa876dec1911ed7a fix popup menus on dialogs
Jan 12, 2018 - 6bd8cb964bd625d7f974621cc9883ba52b58600a Start testing/preparing for wxWidgets 3.1.1/3.2, update to minver 10.10
Jan 24, 2018 - d8b3fc84c2239effb1824e7094c7bf24db45a7ba Fixes sorting in TreeListCtrl, also changed compile flags to
             --enable-std_containers  --enable-std_string_conv_in_wxstring
Feb 26, 2018 - switch to 3.1.1 release tar.bz2
June 17, 2018 - add notes about wxWidgets for OSX Mojave
July 16, 2018 - 85c2877a6c660c3b59c7a5400bab224374e3324a Fixes the native wxDataViewCtrl drag/drop
Aug  1, 2018 - c83f3b39424fd0d6690a64ba05277c77c077b861 Fixes sRGB <-> RGB color space issues
Oct 30, 2018 - move to dkulp/wxWidgets xlights_fixes branch to grab atomic ref counting, Mojave fixes, color fixes, etc...
Jan 6, 2019 - 81de073d3b06d61ed8959d417692e27d49ec17eb  Move to c++17, fixes for multitouch on OpenGL
Jun 30, 2019 - 51bce4ec0b2f1d6e38e1d5ae75e0ad1cec9bae13 Contains fixes for opengl window resizing
July 21, 2019 - 9ede90257fa5813bbb6c32f949b8d69619e14c03 add --enable-mimetype
July 27, 2019 - d50b91554ada145c8031db4540008b0f641bed28 fixes for some openGL issues, wxGrid crashes
Nov 17, 2019 - 099a4c8b77ccca16870d8761ba724be4e4d13643 Update to wxWidget 3.1.3
July 9, 2020 - tag: xlights_2020.28 - Update to prepare for moving to wxWidgets 3.1.4, start preparing for ARM builds
July 16, 2020 - tag: xlights_2020.29 - Update to prepare for moving to wxWidgets 3.1.4, start preparing for ARM builds, fixes socket issues
